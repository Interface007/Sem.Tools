<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sem.Tools</name>
    </assembly>
    <members>
        <member name="T:Sem.Tools.ActionExtension">
            <summary>
            Implements extension methods to handle some "magic" with actions (like concatenating two calls to two methods with the same signature to one method).
            </summary>
        </member>
        <member name="M:Sem.Tools.ActionExtension.Append``1(System.Action{``0},System.Action{``0})">
            <summary>
            Extension to combine two logging methods into a new one.
            </summary>
            <typeparam name="T1">The type of the first parameter of the methods to concatenate.</typeparam>
            <param name="currentAction">The logging method that should be executed first.</param>
            <param name="actionToAdd">The logging method to be executed after <paramref name="currentAction"/>.</param>
            <returns>A new method combining both methods specified in the parameters.</returns>
        </member>
        <member name="M:Sem.Tools.ActionExtension.Append``2(System.Action{``0,``1},System.Action{``0,``1})">
            <summary>
            Extension to combine two logging methods into a new one.
            </summary>
            <typeparam name="T1">The type of the first parameter of the methods to concatenate.</typeparam>
            <typeparam name="T2">The type of the second parameter of the methods to concatenate.</typeparam>
            <param name="currentAction">The logging method that should be executed first.</param>
            <param name="actionToAdd">The logging method to be executed after <paramref name="currentAction"/>.</param>
            <returns>A new method combining both methods specified in the parameters.</returns>
        </member>
        <member name="M:Sem.Tools.ActionExtension.Append``3(System.Action{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
            Extension to combine two logging methods into a new one.
            </summary>
            <typeparam name="T1">The type of the first parameter of the methods to concatenate.</typeparam>
            <typeparam name="T2">The type of the second parameter of the methods to concatenate.</typeparam>
            <typeparam name="T3">The type of the third parameter of the methods to concatenate.</typeparam>
            <param name="currentAction">The logging method that should be executed first.</param>
            <param name="actionToAdd">The logging method to be executed after <paramref name="currentAction"/>.</param>
            <returns>A new method combining both methods specified in the parameters.</returns>
        </member>
        <member name="M:Sem.Tools.ActionExtension.Append``4(System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Extension to combine two logging methods into a new one.
            </summary>
            <typeparam name="T1">The type of the first parameter of the methods to concatenate.</typeparam>
            <typeparam name="T2">The type of the second parameter of the methods to concatenate.</typeparam>
            <typeparam name="T3">The type of the third parameter of the methods to concatenate.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of the methods to concatenate.</typeparam>
            <param name="currentAction">The logging method that should be executed first.</param>
            <param name="actionToAdd">The logging method to be executed after <paramref name="currentAction"/>.</param>
            <returns>A new method combining both methods specified in the parameters.</returns>
        </member>
        <member name="T:Sem.Tools.EncryptionConverter">
            <summary>
            A JSON converter encrypting using DPAPI for the local machine and the current user.
            </summary>
        </member>
        <member name="M:Sem.Tools.EncryptionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type string.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sem.Tools.EncryptionConverter.Write(System.Text.Json.Utf8JsonWriter,System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Sem.Tools.Extensions">
            <summary>
            Very basic extension methods.
            </summary>
        </member>
        <member name="M:Sem.Tools.Extensions.Hash(System.String)">
            <summary>
            Calculates a simple SHA256 hash from a string.
            </summary>
            <param name="value">The string to be hashed.</param>
            <returns>The has as HEX encoded data.</returns>
        </member>
        <member name="M:Sem.Tools.Extensions.MustNotBeNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> when passing NULL or an empty string to <paramref name="value" />.
            </summary>
            <param name="value">The value that must not be null or en empty string.</param>
            <param name="nameOfValue">The name of the value (usually the name of the parameter).</param>
            <returns> The original value of <paramref name="value"/>. </returns>
        </member>
        <member name="M:Sem.Tools.Extensions.MustNotBeNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> when passing NULL values to <paramref name="value" />.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value that must not be null.</param>
            <param name="nameOfValue">The name of the value (usually the name of the parameter).</param>
            <returns> The original value of <paramref name="value"/>. </returns>
        </member>
        <member name="M:Sem.Tools.Extensions.ToJson``1(``0)">
            <summary>
            Extends all objects to have a simple JsonSerialization method.
            </summary>
            <typeparam name="T">The type of the object to be serialized.</typeparam>
            <param name="value">The value to be serialized.</param>
            <returns>A JSON string.</returns>
        </member>
        <member name="T:Sem.Tools.FileSystemTools">
            <summary>
            Tools for file system interaction.
            </summary>
        </member>
        <member name="F:Sem.Tools.FileSystemTools.Sanitizer">
            <summary>
            A Regex to replace illegal characters from file names.
            </summary>
        </member>
        <member name="M:Sem.Tools.FileSystemTools.SanitizeFileName(System.String)">
            <summary>
            Removes illegal characters from file names.
            </summary>
            <param name="fileName">The file name to sanitize.</param>
            <returns>The file name without illegal characters.</returns>
        </member>
        <member name="T:Sem.Tools.InheritanceConverter`1">
            <summary>
            Serializes inherited objects in properties. Normally, only the properties of the type explicitly
            declared on the property is being serialized - with this attribute the property value is fully serialized.
            </summary>
            <typeparam name="TType">The type to handle with this converter.</typeparam>
        </member>
        <member name="M:Sem.Tools.InheritanceConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>Reads and converts the JSON to type <typeparamref name="TType" />.</summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sem.Tools.InheritanceConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>Writes a specified value as JSON.</summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
    </members>
</doc>
