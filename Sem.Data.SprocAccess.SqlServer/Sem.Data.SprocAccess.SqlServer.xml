<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sem.Data.SprocAccess.SqlServer</name>
    </assembly>
    <members>
        <member name="T:Sem.Data.SprocAccess.SqlServer.SqlDatabase">
            <summary>
            An implementation of <see cref="T:Sem.Data.SprocAccess.IDatabase"/> using SQL server as a backend.
            </summary>
        </member>
        <member name="F:Sem.Data.SprocAccess.SqlServer.SqlDatabase.connectionString">
            <summary>
            The connection string for the database.
            </summary>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sem.Data.SprocAccess.SqlServer.SqlDatabase"/> class.
            </summary>
            <param name="connectionString">The database connection string to use for this instance.</param>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlDatabase.Execute``1(System.String,System.Func{Sem.Data.SprocAccess.IReader,System.Threading.Tasks.Task{``0}},Sem.Tools.Logging.LogScope,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Executes a "stored procedure" (aka. "SPROC") and maps the result to a series of POCOs.
            </summary>
            <typeparam name="T">The POCO type to map the result to.</typeparam>
            <param name="sproc">The name of the stored procedure (e.g. "sys.sp_databases" or "[sys].[sp_databases]").</param>
            <param name="readerToObject">A function that maps a single result into a POCO instance.</param>
            <param name="logger">Optional logger.</param>
            <param name="parameters">The named parameters for the SPROC.</param>
            <returns>A series of POCO instances.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlDatabase.DisposeAsync">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="T:Sem.Data.SprocAccess.SqlServer.SqlReader">
            <summary>
            SQL serer implementation of the reader interface <see cref="T:Sem.Data.SprocAccess.IReader"/>.
            </summary>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Sem.Data.SprocAccess.SqlServer.SqlReader"/> class.
            </summary>
            <param name="sqlDataReader">The data reader to read from.</param>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.Read">
            <summary>
            Advances to the next record.
            </summary>
            <returns>A value indicating whether there is still data to be read.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.Get``1(System.Int32)">
            <summary>
            Reads the value of a column by its index.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
            <param name="index">The column index.</param>
            <returns>The value of the column in the current row.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.Get(System.Int32,System.Type)">
            <summary>
            Reads the value of a column by its index.
            </summary>
            <param name="index">The column index.</param>
            <param name="type">The type of the result.</param>
            <returns>The value of the column in the current row.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.NextResult">
            <summary>
            Advances to the next result set.
            </summary>
            <returns>A task to wait for.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.Close">
            <summary>
            Closes the reader.
            </summary>
            <returns>A task to wait for.</returns>
        </member>
        <member name="M:Sem.Data.SprocAccess.SqlServer.SqlReader.IndexByName(System.String)">
            <summary>
            Gets the index of a column by its name (case-insensitive).
            When there are two columns with the same name, the first index will be returned.
            </summary>
            <param name="columnName">The name of the column to search.</param>
            <returns>The index of the column.</returns>
        </member>
    </members>
</doc>
